// Generated by CoffeeScript 1.7.1
(function() {
  Array.prototype.search = function(fn) {
    var child, i, _i, _len;
    for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
      child = this[i];
      if (fn(child)) {
        return child;
      }
    }
    return false;
  };

  Array.prototype["delete"] = function(obj) {
    var idx;
    idx = this.indexOf(obj);
    if (idx === -1) {
      return false;
    }
    this.splice(idx, 1);
    return true;
  };

  Math.sign = function(x) {
    if (x) {
      if (x < 0) {
        return -1;
      }
      return 1;
    }
    return 0;
  };

  window.getRealPosition = function(x, y, offset) {
    var realPosition;
    if (x < game.role.position[0] - game.viewRange[0] - 1 || x > game.role.position[0] + game.viewRange[0] + 1 || y < game.role.position[1] - game.viewRange[1] - 1 || y > game.role.position[1] + game.viewRange[1] + 1) {
      return false;
    }
    if (offset == null) {
      offset = [0, 0];
    }
    realPosition = [];
    realPosition[0] = (x - (game.role.position[0] - game.viewRange[0])) * game.gridSize + offset[0] - game.role.offset[0];
    realPosition[1] = (y - (game.role.position[1] - game.viewRange[1])) * game.gridSize + offset[1] - game.role.offset[1];
    return realPosition;
  };

  window.dir2sign = function(dir) {
    switch (dir) {
      case 0:
        return [0, +1];
      case 1:
        return [-1, +1];
      case 2:
        return [-1, 0];
      case 3:
        return [-1, 1];
      case 4:
        return [0, -1];
      case 5:
        return [1, -1];
      case 6:
        return [1, 0];
      case 7:
        return [1, +1];
    }
    return [0, 0];
  };

  window.sign2dir = function(x, y) {
    var dir;
    dir = [[3, 4, 5], [2, 0, 6], [1, 0, 7]];
    return dir[y + 1][x + 1];
  };

  window.distance = function(x, y, x1, y1) {
    return (x - x1) * (x - x1) + (y - y1) * (y - y1);
  };

  window.random = function(min, max) {
    var value;
    value = parseInt(Math.random() * (max - min)) + min;
    return value;
  };

  window.cloneUser = function(obj) {
    var k, tmp, v;
    tmp = {};
    for (k in obj) {
      v = obj[k];
      if (typeof v !== "function") {
        if (v != null) {
          if (v.constructor.name === "Sprite") {
            switch (v.myself) {
              case "head":
                tmp[k] = head.indexOf(v);
                break;
              case "job":
                tmp[k] = job.indexOf(v);
            }
          } else if (v.constructor.name === "Map") {
            tmp[k] = v.name;
          } else if (v.constructor.name === "Monster") {
            tmp[k] = v.name;
          } else if (v.constructor.name !== "ItemManager" && v.constructor.name !== "MissionManager" && v.constructor.name.substr(0, 3) !== "NPC" && v.constructor.name !== "SkillManager" && v.constructor.name !== "HotkeyManager" && v.constructor.name !== "KeyManager") {
            tmp[k] = v;
          }
        } else {
          tmp[k] = v;
        }
      }
    }
    return tmp;
  };

  Object.prototype.indexOf = function(obj) {
    var k, v;
    for (k in this) {
      v = this[k];
      if (obj === v) {
        return k;
      }
    }
  };

  window.resetRole = function(des, src) {
    var k, v;
    for (k in src) {
      v = src[k];
      if (k !== "sprite" && k !== "map" && k !== "head") {
        des[k] = v;
      }
      if (k === "head") {
        des[k] = head[v];
      }
    }
    return des;
  };

}).call(this);
