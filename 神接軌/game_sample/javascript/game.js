// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.MyGame = (function(_super) {
    __extends(MyGame, _super);

    MyGame.prototype.timeout = function(fn, time) {
      var args, i, that;
      that = this;
      args = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 2, _ref = arguments.length; 2 <= _ref ? _i <= _ref : _i >= _ref; i = 2 <= _ref ? ++_i : --_i) {
          _results.push(arguments[i]);
        }
        return _results;
      }).apply(this, arguments);
      return setTimeout(function() {
        return fn.apply(that, args);
      }, time);
    };

    MyGame.prototype.interval = function(fn, time) {
      var args, i, that;
      that = this;
      args = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 2, _ref = arguments.length; 2 <= _ref ? _i <= _ref : _i >= _ref; i = 2 <= _ref ? ++_i : --_i) {
          _results.push(arguments[i]);
        }
        return _results;
      }).apply(this, arguments);
      return setInterval(function() {
        return fn.apply(that, args);
      }, time);
    };

    function MyGame() {
      this.maps = new Collection();
      this.sprites = new Collection();
      this.windows_manager = new WindowManager();
      this.monster = [];
      this.npc = [];
      this.viewRange = [15, 10];
      this.gridSize = 40;
      this.fps = 0;
      this.users = [];
      this.keydowning = 0;
      this.rootScene = {
        update: function() {},
        draw: function() {}
      };
      this.audio = new Framework.Audio({
        bg: {
          mp3: define.musicPath + "115.mp3"
        },
        eff_00: {
          wav: define.musicPath + 'eff_00.wav'
        },
        eff_01: {
          wav: define.musicPath + 'eff_01.wav'
        },
        eff_02: {
          wav: define.musicPath + 'eff_02.wav'
        },
        eff_03: {
          wav: define.musicPath + 'eff_03.wav'
        },
        eff_04: {
          wav: define.musicPath + 'eff_04.wav'
        },
        eff_05: {
          wav: define.musicPath + 'eff_05.wav'
        },
        eff_06: {
          wav: define.musicPath + 'eff_06.wav'
        },
        eff_07: {
          wav: define.musicPath + 'eff_07.wav'
        },
        eff_08: {
          wav: define.musicPath + 'eff_08.wav'
        },
        eff_09: {
          wav: define.musicPath + 'eff_09.wav'
        }
      });
      this.audio.play({
        name: 'bg',
        loop: true
      });
    }

    MyGame.prototype.initialize = function() {
      var i, _i;
      this.canvas = document.getElementById("__game_canvas__");
      this.canvas.context = this.canvas.getContext("2d");
      if (this.role_name) {
        game.role = new Role(this.role_name, job.Swordsman, this.role_id);
      } else {
        game.role = new Role("主角", job.Swordsman);
      }
      window.npcCreate();
      this.ui = new Sprite("images/ui/lt.png");
      this.chat = new Chat;
      game.role.map = game.maps.data['rock'];
      game.role.mapname = 'rock';
      for (i = _i = 1; _i <= 20; i = ++_i) {
        game.maps.data['prontera'].createMonster(0);
      }
      return game.role.position = [5, 10];
    };

    MyGame.prototype.keydown = function(e, list) {
      var monster, position, role, that, _i, _len, _ref, _results;
      if ($("#chat-send-msg").is(":focus") && e.key !== "Enter") {
        return;
      }
      if (this.keydowning) {
        return;
      }
      this.keydowning = 1;
      that = this;
      this.timeout(function() {
        return that.keydowning = 0;
      }, 100);
      role = game.role;
      position = role.position;
      switch (e.key) {
        case "Left":
          if (role.dir !== 2) {
            role.dir = 2;
            role.action_clear();
            return;
          }
          if (role.npc == null) {
            return role.moveTo(position[0] - 1, position[1]);
          }
          break;
        case "Up":
          if (role.dir !== 4) {
            role.dir = 4;
            role.action_clear();
            return;
          }
          if (role.npc == null) {
            role.moveTo(position[0], position[1] - 1);
          }
          if (role.npc != null) {
            return role.npc.selectOptions('top');
          }
          break;
        case "Right":
          if (role.dir !== 6) {
            role.dir = 6;
            role.action_clear();
            return;
          }
          if (role.npc == null) {
            return role.moveTo(position[0] + 1, position[1]);
          }
          break;
        case "Down":
          if (role.dir !== 0) {
            role.dir = 0;
            role.action_clear();
            return;
          }
          if (role.npc == null) {
            role.moveTo(position[0], position[1] + 1);
          }
          if (role.npc != null) {
            return role.npc.selectOptions('down');
          }
          break;
        case "Z":
          role.attack();
          return role.talk();
        case "X":
          return game.role.hotkey_manager.use("X");
        case "C":
          return game.role.hotkey_manager.use("C");
        case "A":
          return game.role.hotkey_manager.use("A");
        case "S":
          return game.role.hotkey_manager.use("S");
        case "D":
          return game.role.hotkey_manager.use("D");
        case "O":
          return game.role.key_manager.show();
        case "Q":
          return role.mission_manager.showMissions();
        case "I":
          return role.item_manager.showItems();
        case "K":
          return role.skill_manager.show();
        case "M":
          _ref = role.map.monster;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            monster = _ref[_i];
            game.effect.e045.show(game.role.map, monster.position[0], monster.position[1], monster.dir);
            _results.push(monster.die());
          }
          return _results;
          break;
        case "Enter":
          if ($(".chat").hasClass('active-chat') && $("#chat-send-msg").val() === "") {
            $("#hidden-text").focus().remove();
            return $(window).scrollTop(0);
          } else {
            $(".chat #chat-send-msg").focus();
            return $("body").append($("<input type='text' id='hidden-text'>").css("opacity", 0));
          }
      }
    };

    MyGame.prototype.update = function() {};

    MyGame.prototype.redraw = function() {
      return this.draw();
    };

    MyGame.prototype.draw = function() {
      var monster, npc, user, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      this.canvas.context.fillStyle = "#FFFFFF";
      this.canvas.context.clearRect(0, 0, $(this.canvas).width(), $(this.canvas).height());
      this.role.map.redraw();
      this.role.redraw();
      _ref = this.users;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        user = _ref[_i];
        if (user.name !== game.role.name) {
          user.redraw();
        }
      }
      _ref1 = this.role.map.monster;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        monster = _ref1[_j];
        monster.redraw();
      }
      _ref2 = this.role.map.npc;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        npc = _ref2[_k];
        npc.redraw();
      }
      this.role.map.drawFrontObject();
      this.effectController.redraw();
      this.role.drawUI();
      return this.text.redraw();
    };

    MyGame.prototype.drag = function(e) {
      if (e == null) {
        e = event;
      }
      return e.dataTransfer.setData("Text", {
        a: this
      });
    };

    return MyGame;

  })(Framework.Level);

  window.game = new MyGame();

}).call(this);
