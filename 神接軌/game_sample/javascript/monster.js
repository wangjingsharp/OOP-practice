// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Monster = (function(_super) {
    __extends(Monster, _super);

    function Monster(name, sprite, mapname, x, y) {
      this.name = name;
      this.sprite = sprite;
      this.mapname = mapname;
      Monster.__super__.constructor.call(this, this.name, this.sprite);
      this.map = game.maps.data[this.mapname];
      this.key = this.name;
      this.position = [x, y];
      this.gifes = [];
      this.initiative = 0;
      this.range = 10;
      this.atk = 1;
      this.autoMove();
      this.interval_id = this.interval(this.autoMove, 1500 + random(0, 1000));
      this.exp = 10;
      this.map.monster.push(this);
    }

    Monster.prototype.die = function() {
      var gife, _i, _len, _ref;
      Monster.__super__.die.call(this);
      game.role.mission_manager.killMonster(this.name);
      game.role.getExp(this.exp);
      clearInterval(this.interval_id);
      _ref = this.gifes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        gife = _ref[_i];
        if (random(0, 2) === 1) {
          game.role.item_manager.addItem(gife);
        }
      }
      this.map.createMonster();
    };

    Monster.prototype.died = function() {
      Monster.__super__.died.call(this);
      return delete this;
    };

    Monster.prototype.autoMove = function() {
      var diff, dir, min_dir, min_length, role_position, sign, x, y, _i, _len, _length, _ref;
      if (this.initiative === 1) {
        role_position = game.role.position;
        diff = Math.sqrt(Math.pow(role_position[0] - this.position[0], 2) + Math.pow(role_position[1] - this.position[1], 2));
        if (diff < this.range) {
          this.attack_target = game.role;
        } else {
          this.attack_target = null;
        }
      }
      while (true) {
        x = this.position[0] + parseInt(Math.random() * 7) - 3;
        y = this.position[1] + parseInt(Math.random() * 7) - 3;
        if (!(x >= 0 && y >= 0 && x < this.map.width && y < this.map.height && this.map.git[x][y] === 0)) {
          break;
        }
      }
      sign = [0, 0];
      if (this.attack_target != null) {
        x = this.attack_target.position[0];
        y = this.attack_target.position[1];
        min_length = 1000;
        _ref = [0, 2, 4, 6];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          dir = _ref[_i];
          sign = dir2sign(dir);
          if ((this.map.git[this.position[0] + sign[0]] == null) || !this.map.git[this.position[0] + sign[0]][this.position[1] + sign[1]]) {
            continue;
          }
          _length = distance(this.position[0], this.position[1], x + sign[0], y + sign[1]);
          if (_length < min_length) {
            min_length = _length;
            min_dir = dir;
          }
        }
        sign = dir2sign(min_dir);
      }
      if (min_length === 0) {
        this.attack(this);
        this.attack_target.damage(this, this.atk);
      }
      return this.moveTo(x + sign[0], y + sign[1]);
    };

    Monster.prototype.addGife = function(item) {
      return this.gifes.push(item);
    };

    return Monster;

  })(window.Animate);

}).call(this);
