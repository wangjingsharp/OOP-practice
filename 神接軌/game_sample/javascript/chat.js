// Generated by CoffeeScript 1.7.1
(function() {
  window.Chat = (function() {
    function Chat() {
      var canvas, form, height, input, send, that, width, _h;
      width = 500;
      height = 300;
      canvas = $("#__game_canvas__");
      this.html = $("<div>");
      this.html.addClass("chat");
      this.html.width(width).height(height);
      this.chat_view = $("<div>");
      this.send_view = $("<div>");
      form = $("<form>");
      input = $("<input type='text' id='chat-send-msg' autocomplete='off'>");
      send = $("<button type='submit' class='send'>").html("送出");
      that = this;
      form.on("submit", function() {
        that.sendMsg(input.val());
        input.val("");
        return false;
      });
      input.on("blur", function() {
        that.html.removeClass("active-chat");
        return $("#hidden-text").remove();
      }).on("focus", function() {
        return that.html.addClass("active-chat");
      }).css("border", "none");
      $(window).resize(function() {
        return that.html.css("left", (window.innerWidth - canvas.width()) / 2);
      });
      if (window.innerHeight > canvas.height()) {
        _h = window.innerHeight - canvas.height();
      } else {
        _h = 0;
      }
      this.html.css("left", (window.innerWidth - canvas.width()) / 2).css("bottom", _h);
      this.chat_view.css("height", height - 35).css("overflow-y", "scroll");
      this.send_view.css("position", "absolute").css("bottom", "5px");
      input.css("margin", "0").css("border-radius", "3px 0 0 3px").css("width", width - 50);
      send.css("padding", "0 8px").css("vertical-align", "top").css("border", "none").css("border-left", "1px solid #999").css("border-radius", "0 3px 3px 0").css("line-height", "25px").css("height", "25px");
      form.append(input).append(send);
      this.send_view.append(form);
      this.html.append(this.chat_view).append(this.send_view);
      this.html.appendTo($("body"));
    }

    Chat.prototype.sendMsg = function(msg) {
      var tim;
      if ((msg == null) || msg === "") {
        return;
      }
      tim = new Date();
      if (msg.substr(0, 1) === "@") {
        eval("game.role." + msg.substr(1));
      } else {
        socket.emit('ReceiveChat', {
          name: game.role.name,
          msg: msg
        });
      }
    };

    Chat.prototype.receiveMsg = function(option) {
      var msg, name, row, time, user, _i, _len, _ref;
      if (option.name === game.role.name) {
        game.text.msg(option.msg, game.role);
      } else {
        _ref = game.users;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          user = _ref[_i];
          if (user.name === option.name) {
            game.text.msg(option.msg, user);
          }
        }
      }
      row = $("<div class='row'>");
      time = $("<span class='time'>");
      name = $("<span class='name'>");
      msg = $("<span class='msg'>");
      time.html("[" + option.time + "]");
      name.html("" + option.name + ":");
      msg.html("" + option.msg);
      row.append(time).append(name).append(msg);
      this.chat_view.append(row);
      return this.chat_view.scrollTop(this.chat_view.scrollTop() + this.chat_view.height());
    };

    return Chat;

  })();

}).call(this);
