// Generated by CoffeeScript 1.7.1
(function() {
  var game, getRealPosition, js_list, loader,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Array.prototype.search = function(fn) {
    var child, i, _i, _len;
    for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
      child = this[i];
      if (fn(child)) {
        return child;
      }
    }
    return false;
  };

  window.Base = (function() {
    function Base() {}

    Base.prototype.timeout = function(fn, time) {
      var args, i, that;
      that = this;
      args = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 2, _ref = arguments.length; 2 <= _ref ? _i <= _ref : _i >= _ref; i = 2 <= _ref ? ++_i : --_i) {
          _results.push(arguments[i]);
        }
        return _results;
      }).apply(this, arguments);
      return setTimeout(function() {
        return fn.apply(that, args);
      }, time);
    };

    Base.prototype.interval = function(fn, time) {
      var args, i, that;
      that = this;
      args = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 2, _ref = arguments.length; 2 <= _ref ? _i <= _ref : _i >= _ref; i = 2 <= _ref ? ++_i : --_i) {
          _results.push(arguments[i]);
        }
        return _results;
      }).apply(this, arguments);
      return setInterval(function() {
        return fn.apply(that, args);
      }, time);
    };

    return Base;

  })();

  window.Collection = (function(_super) {
    __extends(Collection, _super);

    function Collection() {
      return Collection.__super__.constructor.apply(this, arguments);
    }

    Collection.data = [];

    Collection.prototype.get = function(key) {
      return this.data[key];
    };

    Collection.prototype.add = function(object) {
      if (this.data[object.key] != null) {
        return this.data[object.key];
      }
      if (this.data.indexOf(object.key) === -1) {
        this.data[object.key] = object;
      }
      return object;
    };

    return Collection;

  })(window.Base);

  window.Game = (function() {
    function Game() {
      this.maps = new Collection();
      this.sprites = new Collection();
      setTimeout(this.init, 1000);
      this.canvas = $("#game");
      this.canvas.context = this.canvas[0].getContext("2d");
      this.viewRange = 10;
      this.gridSize = 40;
      setInterval(this.redraw, 30);
      setInterval(this.update, 10);
      $(window).on('keydown', {
        that: this
      }, this.keydown);
    }

    Game.prototype.init = function() {
      window.job = {};
      window.job.Swordsman = new Sprite("images/A000.png", [[[[0, 0, 30, 28]], [[0, 0, 30, 28]], [[0, 0, 30, 28]], [[0, 0, 30, 28]], [[0, 0, 30, 28]], [[0, 0, 30, 28]], [[0, 0, 30, 28]], [[0, 0, 30, 28]]], [[[30, 0, 48, 28]], [[30, 0, 48, 28]], [[30, 0, 48, 28]], [[30, 0, 48, 28]], [[30, 0, 48, 28]], [[30, 0, 48, 28]], [[30, 0, 48, 28]], [[30, 0, 48, 28]]], [[[78, 0, 28, 36], [106, 0, 27, 36], [134, 0, 33, 32], [168, 0, 32, 32], [200, 0, 32, 32]], [[78, 0, 28, 36], [106, 0, 27, 36], [134, 0, 33, 32], [168, 0, 32, 32], [200, 0, 32, 32]], [[78, 0, 28, 36], [106, 0, 27, 36], [134, 0, 33, 32], [168, 0, 32, 32], [200, 0, 32, 32]], [[232, 0, 26, 34], [258, 0, 25, 34], [284, 0, 27, 30], [312, 0, 26, 30], [338, 0, 26, 30]], [[232, 0, 26, 34], [258, 0, 25, 34], [284, 0, 27, 30], [312, 0, 26, 30], [338, 0, 26, 30]], [[232, 0, -26, 34], [258, 0, -25, 34], [284, 0, -27, 30], [312, 0, -26, 30], [338, 0, -26, 30]], [[232, 0, -26, 34], [258, 0, -25, 34], [284, 0, -27, 30], [312, 0, -26, 30], [338, 0, -26, 30]], [[232, 0, -26, 34], [258, 0, -25, 34], [284, 0, -27, 30], [312, 0, -26, 30], [338, 0, -26, 30]]], [[[364, 0, 26, 36]], [[390, 0, 17, 36]], [[408, 0, 24, 36]], [[432, 0, 29, 36]], [[462, 0, 25, 36]], [[432, 0, -29, 36]], [[408, 0, -24, 36]], [[390, 0, -17, 36]]], [[[488, 0, 22, 34]], [[488, 0, 22, 34]], [[488, 0, 22, 34]], [[518, 0, 30, 34]], [[518, 0, 30, 34]], [[518, 0, 30, 34]], [[518, 0, -30, 34]], [[518, 0, -30, 34]], [[488, 0, -22, 34]]], [[[556, 0, 24, 36], [580, 0, 23, 36], [604, 0, 21, 34], [626, 0, 22, 36], [648, 0, 24, 36], [672, 0, 23, 36], [696, 0, 20, 34], [716, 0, 21, 36]], [[738, 0, 21, 36], [760, 0, 25, 36], [786, 0, 31, 34], [818, 0, 26, 36], [844, 0, 21, 36], [866, 0, 24, 36], [890, 0, 24, 34], [914, 0, 22, 36]], [[936, 0, 17, 36], [954, 0, 21, 36], [976, 0, 29, 34], [0, 36, 20, 36], [20, 36, 17, 36], [38, 36, 22, 36], [60, 36, 28, 34], [88, 36, 25, 36], [114, 36, 20, 36]], [[134, 36, 19, 36], [154, 36, 22, 34], [176, 36, 20, 36], [196, 36, 19, 36], [216, 36, 27, 36], [244, 36, 30, 34], [274, 36, 27, 36], [302, 36, 23, 36]], [[326, 36, 22, 36], [348, 36, 21, 34], [370, 36, 22, 36], [392, 36, 23, 36], [416, 36, 23, 36], [440, 36, 20, 34], [460, 36, 21, 36]], [[134, 36, -19, 36], [154, 36, -22, 34], [176, 36, -20, 36], [196, 36, -19, 36], [216, 36, -27, 36], [244, 36, -30, 34], [274, 36, -27, 36], [302, 36, -23, 36]], [[936, 0, -17, 36], [954, 0, -21, 36], [976, 0, -29, 34], [0, 36, -20, 36], [20, 36, -17, 36], [38, 36, -22, 36], [60, 36, -28, 34], [88, 36, -25, 36], [114, 36, -20, 36]], [[738, 0, -21, 36], [760, 0, -25, 36], [786, 0, -31, 34], [818, 0, -26, 36], [844, 0, -21, 36], [866, 0, -24, 36], [890, 0, -24, 34], [914, 0, -22, 36]]]]);
      game.role = new Role("主角", window.job.Swordsman);
      game.role.map = "prontera";
      return game.role.position = [10, 10];
    };

    Game.prototype.keydown = function(e) {
      var position;
      position = game.role.position;
      switch (e.which) {
        case 37:
          return game.role.moveTo(position[0] - 1, position[1]);
        case 38:
          return game.role.moveTo(position[0], position[1] + 1);
        case 39:
          return game.role.moveTo(position[0] + 1, position[1]);
        case 40:
          return game.role.moveTo(position[0], position[1] - 1);
      }
    };

    Game.prototype.update = function() {
      var that;
      that = game;
      return that.role.update();
    };

    Game.prototype.redraw = function() {
      var that;
      that = game;
      console.clear();
      that.canvas.context.fillStyle = "#FFFFFF";
      that.canvas.context.clearRect(0, 0, 800, 800);
      that.maps.data[that.role.map].redraw();
      that.role.redraw();
    };

    return Game;

  })();

  window.Role = (function(_super) {
    __extends(Role, _super);

    function Role(name, sprite) {
      this.name = name;
      this.sprite = sprite;
      this.position = [0, 0];
      this.action_index = 0;
      this.map = "";
      this.offset = [0, 0];
      this.moment = 0;
      this.dir = 0;
      this.speed = 10;
      this._speed = 0;
      this.path = [];
      this.walk_timer = 0;
    }

    Role.prototype.moveTo = function(x, y) {
      if (game.maps.data[game.role.map].git[x][y] !== 1) {
        return;
      }
      if (this.path.length) {
        this.clear_walk();
      }
      this.path = game.maps.data[game.role.map].search_path(this.position[0], this.position[1], x, y);
      this.start_walk();
    };

    Role.prototype.clear_walk = function() {};

    Role.prototype.start_walk = function() {
      var that;
      that = this;
      this.walkInterval = this.interval(this.walk, 1000, 1, 2);
    };

    Role.prototype.walk = function(a, b) {
      console.log(this);
      console.log(a);
      return console.log(b);
    };

    Role.prototype.move_sub = function() {};

    Role.prototype.wrapTo = function(x, y) {
      return this.position = [x, y];
    };

    Role.prototype.update = function() {
      if (this._speed-- === 0) {
        this.moment = ++this.moment % this.sprite.rect[5][this.dir].length;
        return this._speed = this.speed;
      }
    };

    Role.prototype.redraw = function() {
      return this.sprite.draw(this.position[0], this.position[1], 5, this.dir, this.moment);
    };

    return Role;

  })(window.Base);

  window.Map = (function() {
    function Map(name, width, height, data, git, object, palettes, objects) {
      var i, palette, _i, _len;
      this.name = name;
      this.width = width;
      this.height = height;
      this.data = data;
      this.git = git;
      this.object = object;
      this.objects = objects;
      this.key = this.name;
      game.maps.add(this);
      this.palette = [];
      for (i = _i = 0, _len = palettes.length; _i < _len; i = ++_i) {
        palette = palettes[i];
        this.palette[i] = game.sprites.add(new Sprite(palette));
      }
    }

    Map.prototype.redraw = function() {
      var centerPosition, h, w, _i, _j, _ref, _ref1, _ref2, _ref3;
      centerPosition = game.role.position;
      for (w = _i = _ref = centerPosition[0] - game.viewRange, _ref1 = centerPosition[0] + game.viewRange; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; w = _ref <= _ref1 ? ++_i : --_i) {
        for (h = _j = _ref2 = centerPosition[1] - game.viewRange, _ref3 = centerPosition[1] + game.viewRange; _ref2 <= _ref3 ? _j <= _ref3 : _j >= _ref3; h = _ref2 <= _ref3 ? ++_j : --_j) {
          if (w < 0 || w >= this.data.length || h < 0 || h >= this.data[w].length || this.data[w][h] === 0) {
            continue;
          }
          this.palette[this.data[h][w] - 1].draw(w, h);
        }
      }
    };

    Map.prototype.search_path = function(x, y, to_x, to_y) {
      var dx, dy, i, path, path_choicse;
      path_choicse = [[1, 0, 7], [2, -1, 6], [3, 4, 5]];
      path = [];
      dx = Math.sign(to_x - x);
      dy = Math.sign(to_y - y);
      i = 0;
      while (i < 10000) {
        path.push(path_choicse[dx + 1][dy + 1]);
        i++;
        x += dx;
        y += dy;
        if (x === dx) {
          dx = 0;
        }
        if (y === dy) {
          dy = 0;
        }
        if (this.git[y][x]) {
          break;
        }
        if (dx === 0 && dy === 0) {
          return path;
        }
      }
      return path;
    };

    return Map;

  })();

  window.Sprite = (function() {
    function Sprite(filepath, rect) {
      this.filepath = filepath;
      this.rect = rect;
      this.key = this.filepath;
      this.dom = new Image();
      this.dom.src = this.filepath;
      this.status = false;
      $(this.dom).on('load', {
        that: this
      }, this.afterLoadImage);
      return;
    }

    Sprite.prototype.afterLoadImage = function(e) {
      var that;
      that = e.data.that;
      that.status = true;
      if (that.buffer != null) {
        that.drawBuffer();
      }
    };

    Sprite.prototype.drawBuffer = function() {
      this.draw(this.buffer[0], this.buffer[1], this.buffer[2]);
    };

    Sprite.prototype.draw = function(x, y, action, direction, moment) {
      var position, rect;
      position = getRealPosition(x, y);
      if (position === false) {
        return;
      }
      if (action == null) {
        game.canvas.context.drawImage(this.dom, position[0], position[1]);
      } else {
        rect = this.rect[action][direction][moment];
        if (rect[2] < 0) {
          game.canvas.context.translate(game.canvas.context.width, 0);
          game.canvas.context.scale(-1, 1);
          game.canvas.context.drawImage(this.dom, rect[0], rect[1], Math.abs(rect[2]), rect[3], -position[0] - Math.abs(rect[2]), position[1], Math.abs(rect[2]), rect[3]);
          game.canvas.context.translate(game.canvas.context.width, 0);
          game.canvas.context.scale(-1, 1);
        } else {
          game.canvas.context.drawImage(this.dom, rect[0], rect[1], Math.abs(rect[2]), rect[3], position[0], position[1], Math.abs(rect[2]), rect[3]);
        }
      }
    };

    return Sprite;

  })();

  game = null;

  (function() {
    return game = new Game();
  });

  getRealPosition = function(x, y) {
    var realPosition;
    if (x < game.role.position[0] - game.viewRange || x > game.role.position[0] + game.viewRange || y < game.role.position[1] - game.viewRange || y > game.role.position[1] + game.viewRange) {
      return false;
    }
    realPosition = [];
    realPosition[0] = (x - (game.role.position[0] - game.viewRange)) * game.gridSize + game.role.offset[0];
    realPosition[1] = (y - (game.role.position[1] - game.viewRange)) * game.gridSize + game.role.offset[1];
    return realPosition;
  };

  Math.sign = function(x) {
    if (x) {
      if (x < 0) {
        return -1;
      }
      return 1;
    }
    return 0;
  };

  js_list = [];

  window.jsLoader = (function(_super) {
    __extends(jsLoader, _super);

    function jsLoader(after) {
      this.after = after;
      this.js_list = [];
    }

    jsLoader.prototype.add = function(file) {
      return this.js_list.push(file);
    };

    jsLoader.prototype.start = function() {
      var file, js, _i, _len, _ref, _results;
      _ref = this.js_list;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        js = document.createElement("script");
        js.type = 'text/javascript';
        js.src = file;
        js.loader = this;
        js.onload = this.afterLoadOne;
        _results.push(document.getElementsByTagName('head')[0].appendChild(js));
      }
      return _results;
    };

    jsLoader.prototype.afterLoadOne = function() {
      console.log(this.loader);
      return console.log(this);
    };

    return jsLoader;

  })(window.Base);

  loader = new jsLoader();

  loader.add("javascript/map/prontera.js");

  loader.add("xxxx.js");

  loader.start();

}).call(this);
