// Generated by CoffeeScript 1.7.1
(function() {
  game.sprite_count = 1;

  game.loaded_sprite_count = 0;

  window.Sprite = (function() {
    function Sprite(filepath, rect, myself) {
      this.filepath = filepath;
      this.rect = rect;
      this.myself = myself;
      this.key = this.filepath;
      this.dom = new Image();
      this.dom.src = this.filepath;
      this.status = false;
      $(this.dom).on('load', {
        that: this
      }, this.afterLoadImage);
      $(this.dom).on('error', {
        that: this
      }, this.afterLoadImage);
      game.sprite_count++;
      return;
    }

    Sprite.prototype.afterLoadImage = function(e) {
      var that;
      that = e.data.that;
      that.status = true;
      game.loaded_sprite_count++;
      console.log(game.loaded_sprite_count);
      $("#loader").html('<img src="/images/loading.gif"><br/>' + Math.ceil(game.loaded_sprite_count / 755 * 100) + '%');
      if (game.loaded_sprite_count === game.sprite_count) {
        $("#loader").hide();
      }
    };

    Sprite.prototype.drawUI = function(x, y, w, h) {
      if (w != null) {
        return game.canvas.context.drawImage(this.dom, x, y, w, h);
      } else {
        return game.canvas.context.drawImage(this.dom, x, y);
      }
    };

    Sprite.prototype.realDraw = function(x, y) {
      return game.canvas.context.drawImage(this.dom, x - (game.role.position[0] - game.viewRange[0]) * 40 - game.role.offset[0], y - (game.role.position[1] - game.viewRange[1]) * 40 - game.role.offset[1]);
    };

    Sprite.prototype.draw = function(x, y, action, direction, moment, offset) {
      var n_action, n_direction, n_moment, position, rect;
      if (!offset) {
        offset = [0, 0];
      }
      position = getRealPosition(x, y, offset);
      if (position === false) {
        return;
      }
      if ((action == null) || action < 0) {
        if (action === -2) {
          game.canvas.context.translate(game.canvas.context.width, 0);
          game.canvas.context.scale(-1, 1);
          game.canvas.context.drawImage(this.dom, -(position[0] + offset[0] + this.dom.width), position[1] + offset[1]);
          game.canvas.context.translate(game.canvas.context.width, 0);
          game.canvas.context.scale(-1, 1);
        } else if (action === -3) {
          game.canvas.context.translate(game.canvas.context.width, 0);
          game.canvas.context.scale(1, -1);
          game.canvas.context.drawImage(this.dom, position[0] + offset[0], -(position[1] + offset[1] + this.dom.height));
          game.canvas.context.translate(game.canvas.context.width, 0);
          game.canvas.context.scale(1, -1);
        } else {
          game.canvas.context.drawImage(this.dom, position[0] + offset[0], position[1] + offset[1]);
        }
      } else {
        n_action = action % this.rect.length;
        n_direction = direction % this.rect[n_action].length;
        n_moment = moment % this.rect[n_action][n_direction].length;
        rect = this.rect[n_action][n_direction][n_moment];
        if (rect != null) {
          if (rect[4] != null) {
            position[0] += rect[4];
          }
          if (rect[5] != null) {
            position[1] += rect[5];
          }
        }
        if (direction > 5) {
          game.canvas.context.translate(game.canvas.context.width, 0);
          game.canvas.context.scale(-1, 1);
          game.canvas.context.drawImage(this.dom, rect[0], rect[1], Math.abs(rect[2]), rect[3], -position[0] - Math.abs(this.rect[n_action][n_direction][0][3]), position[1] - rect[3] + 40, Math.abs(rect[2]), rect[3]);
          game.canvas.context.translate(game.canvas.context.width, 0);
          game.canvas.context.scale(-1, 1);
        } else if (this.dom != null) {
          game.canvas.context.drawImage(this.dom, rect[0], rect[1], Math.abs(rect[2]), rect[3], position[0] + 10, position[1] - rect[3] + 40, Math.abs(rect[2]), rect[3]);
        }
      }
    };

    return Sprite;

  })();

}).call(this);
