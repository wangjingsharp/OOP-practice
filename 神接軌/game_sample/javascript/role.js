// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Role = (function(_super) {
    __extends(Role, _super);

    function Role(name, sprite, id) {
      this.name = name;
      this.sprite = sprite;
      this.id = id;
      Role.__super__.constructor.call(this, this.name, this.sprite, this.id);
      this.key_manager = new KeyManager;
      this.mission_manager = new MissionManager;
      this.item_manager = new ItemManager;
      this.skill_manager = new SkillManager;
      this.hotkey_manager = new HotkeyManager;
      this.head = head.h001;
      this.money = 10000;
      this.realAspd = 100;
      this.realSpeed = 200;
      this.realAtk = 10;
      this.calculate();
      this.skills = [[game.skill.s001, 0], [game.skill.s002, 0], [game.skill.s003, 0], [game.skill.s004, 0], [game.skill.s005, 0], [game.skill.s006, 0]];
      this.skillpoint = 3;
      return this;
    }

    Role.prototype.talk = function() {
      var sign;
      sign = dir2sign(this.dir);
      if (!this.talking) {
        this.npc = this.map.findNpc(this.position[0] + sign[0], this.position[1] + sign[1]);
      }
      if (this.npc) {
        this.npc.dir = sign2dir(sign[0] * -1, sign[1] * -1);
        if (!this.talking) {
          this.npc.talkStart();
          return this.talking = 1;
        } else {
          return this.npc.talk();
        }
      }
    };

    Role.prototype.move = function() {
      Role.__super__.move.call(this);
      if (!this.talking) {
        this.npc = this.map.touchNPC(this.position[0], this.position[1]);
      }
      if (this.npc && !this.talking) {
        return this.npc.touch();
      }
    };

    Role.prototype.attack = function() {
      var monster, sign;
      sign = dir2sign(this.dir);
      monster = this.map.findMonster(this.position[0] + sign[0], this.position[1] + sign[1]);
      if (Role.__super__.attack.call(this, monster)) {
        return;
      }
      game.audio.play({
        name: 'eff_00',
        loop: true
      });
      game.effect.e004.show(this.map, this.position[0], this.position[1], this.dir);
      if (monster) {
        return monster.damage(this, this.atk);
      }
    };

    Role.prototype.useSkill = function() {
      if (Role.__super__.useSkill.call(this)) {

      }
    };

    Role.prototype.redraw = function() {
      if (this.hp < 1) {
        this.hp = 1;
      }
      this.sprite.draw(this.position[0], this.position[1], this.action, this.dir, this.moment, this.offset);
      this.head.draw(this.position[0], this.position[1], this.action, this.dir, this.moment, this.offset);
      this.drawHp();
      return this.drawName();
    };

    Role.prototype.drawUI = function() {
      var context, i, o, _i, _len, _ref, _results;
      context = game.canvas.context;
      context.textAlign = "left";
      context.fillStyle = '#FFF';
      context.fillRect(236, 10, 210, 18);
      context.fillRect(222, 35, 210, 18);
      context.fillRect(210, 64, 210, 18);
      context.fillStyle = '#ccc';
      context.fillRect(236, 10, 210, 18);
      context.fillStyle = '#c90909';
      context.fillRect(236, 10, 210 * this.hp / this.maxHP, 18);
      context.fillStyle = '#ccc';
      context.fillRect(222, 35, 210, 18);
      context.fillStyle = '#093b85';
      context.fillRect(222, 35, 210 * this.mp / this.maxMP, 18);
      context.fillStyle = '#ccc';
      context.fillRect(210, 64, 210, 18);
      context.fillStyle = '#ce801b';
      context.fillRect(210, 64, 210 * this.exp / this.nextLvNeedExp, 18);
      context.font = "18px Arial";
      context.fillStyle = "#FFF";
      context.fillText(this.hp + " / " + this.maxHP, 250, 26);
      context.fillText(this.mp + " / " + this.maxMP, 240, 52);
      context.fillText(this.exp + " / " + this.nextLvNeedExp, 230, 80);
      game.ui.drawUI(0, 0);
      context.fillText(this.lv, 185, 109);
      this.hotkey_manager.redraw();
      _ref = this.statusList;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        o = _ref[i];
        o[0].icon.drawUI(1150, 200 + i * 60);
        context.globalAlpha = .3;
        context.fillStyle = '#333';
        context.fillRect(1150, 200 + i * 60, 40, Math.max(40 - 40 * (new Date().getTime() - o[2]) / o[1], 0));
        context.globalAlpha = 1;
        context.font = "12px Arial";
        context.textAlign = "center";
        context.fillStyle = "#000";
        context.fillText(o[0].name, 1171, 200 + i * 60 + 53);
        context.fillStyle = "#FFF";
        _results.push(context.fillText(o[0].name, 1170, 200 + i * 60 + 52));
      }
      return _results;
    };

    Role.prototype.skillup = function() {
      var skill, _i, _len, _ref;
      _ref = game.role.skills;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        skill = _ref[_i];
        if (skill === this && skill[1] < skill[0].maxLV) {
          skill[1]++;
          game.role.skillpoint--;
          game.role.skill_manager.redraw();
          return;
        }
      }
    };

    Role.prototype.lvup = function(i) {
      var _results;
      _results = [];
      while (i--) {
        game.effect.e037.show(game.role.map, game.role.position[0], game.role.position[1], game.role.dir);
        this.realAtk += this.lv;
        this.realAspd -= this.lv / 5;
        this.realMaxHP += this.lv * 2;
        this.realMaxMP += this.lv * 2;
        this.realHit += 1;
        this.lv++;
        this.nextLvNeedExp = Math.floor(this.nextLvNeedExp * 1.3);
        this.skillpoint++;
        _results.push(this.exp = 0);
      }
      return _results;
    };

    Role.prototype.getExp = function(exp) {
      this.exp += exp;
      if (this.exp >= this.nextLvNeedExp) {
        return this.lvup(1);
      }
    };

    return Role;

  })(window.Animate);

}).call(this);
