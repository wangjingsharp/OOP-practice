// Generated by CoffeeScript 1.7.1
(function() {
  var MapMaker;

  MapMaker = (function() {
    function MapMaker() {
      var git, gits, h, object, that, tile, tile_palette, w, _i, _j, _k, _l, _len, _m, _ref, _ref1;
      this.width = prompt("width : ", 100);
      this.height = prompt("height : ", 100);
      this.canvas = $("canvas");
      this.canvas.attr("width", this.width * 40);
      this.canvas.attr("height", this.height * 40);
      this.context = this.canvas[0].getContext("2d");
      this.data = [];
      this.git = [];
      this.object = [];
      this.tilePalette = [];
      this.objectPalette = [];
      this.selectObjectIndex = -1;
      this.offsetX = 0;
      this.offsetY = 0;
      for (w = _i = 0, _ref = this.width; 0 <= _ref ? _i <= _ref : _i >= _ref; w = 0 <= _ref ? ++_i : --_i) {
        this.data[w] = [];
        this.git[w] = [];
        for (h = _j = 0, _ref1 = this.height; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; h = 0 <= _ref1 ? ++_j : --_j) {
          this.data[w][h] = 0;
          this.git[w][h] = 1;
        }
      }
      tile_palette = ['images/tile/tile_ch1_t000.png', 'images/tile/tile_abyss001.png', 'images/tile/tile_abyss002.png', 'images/tile/tile_abyss003.png', 'images/tile/tile_abyss004.png', 'images/tile/tile_abyss005.png', 'images/tile/tile_abyss006.png', 'images/tile/tile_abyss007.png', 'images/tile/tile_abyss008.png', 'images/tile/tile_abyss009.png', 'images/tile/tile_abyss010.png', 'images/tile/tile_abyss011.png', 'images/tile/tile_abyss012.png', 'images/tile/tile_abyss013.png', 'images/tile/tile_abyss014.png', 'images/tile/tile_abyss015.png', 'images/tile/tile_abyss016.png', 'images/tile/tile_abyss017.png', 'images/tile/tile_abyss018.png', 'images/tile/tile_abyss019.png', 'images/tile/tile_abyss020.png', 'images/tile/tile_abyss021.png', 'images/tile/tile_abyss022.png', 'images/tile/tile_abyss023.png', 'images/tile/tile_abyss024.png', 'images/tile/tile_abyss025.png', 'images/tile/tile_abyss026.png', 'images/tile/tile_abyss027.png', 'images/tile/tile_abyss028.png', 'images/tile/tile_abyss029.png', 'images/tile/tile_abyss030.png', 'images/tile/tile_abyss031.png', 'images/tile/tile_abyss032.png', 'images/tile/tile_abyss033.png', 'images/tile/tile_abyss034.png', 'images/tile/tile_abyss035.png', 'images/tile/tile_abyss036.png', 'images/tile/tile_abyss037.png', 'images/tile/tile_abyss038.png', 'images/tile/tile_abyss039.png', 'images/tile/tile_abyss040.png', 'images/tile/tile_abyss041.png', 'images/tile/tile_abyss042.png'];
      for (tile = _k = 0; _k <= 97; tile = ++_k) {
        if (tile < 10) {
          this.addTilePalette("images/tile/tile_ch1_t00" + tile + ".png");
        } else {
          this.addTilePalette("images/tile/tile_ch1_t0" + tile + ".png");
        }
      }
      gits = [1, 0];
      for (_l = 0, _len = gits.length; _l < _len; _l++) {
        git = gits[_l];
        this.addGitPalette(git);
      }
      for (object = _m = 0; _m <= 24; object = ++_m) {
        if (object < 10) {
          this.addObjectPalette("images/object/obj_ch1_t0" + object + ".png");
        } else {
          this.addObjectPalette("images/object/obj_ch1_t" + object + ".png");
        }
      }
      that = this;
      this.canvas.on('mousedown', {
        that: this
      }, this.start_draw);
      this.canvas.on('mousemove', {
        that: this
      }, this.draw);
      this.canvas.on('mouseup', {
        that: this
      }, this.end_draw);
      $("li[mode='tile']").on('click', {
        that: this
      }, this.tileMode);
      $("li[mode='git']").on('click', {
        that: this
      }, this.gitMode);
      $("li[mode='object']").on('click', {
        that: this
      }, this.objectMode);
      $("li[mode='save']").on('click', {
        that: this
      }, this.saveMode);
      $(window).on('keydown', {
        that: this
      }, this.keyboardChangePalette);
      $("li[mode='tile']").click();
      $(".tile:first-child").click();
      $(".git:first-child").click();
      $(".object:first-child").click();
      this.redraw();
      return;
    }

    MapMaker.prototype.keyboardChangePalette = function(e) {
      var that;
      that = e.data.that;
      if (that.mode !== 'tile') {
        return;
      }
      switch (e.keyCode) {
        case 219:
          $(".tile.selected").removeClass("selected");
          $($(".tile")[--that.selectTilePaletteIndex - 1]).addClass("selected");
          break;
        case 221:
          $(".tile.selected").removeClass("selected");
          $($(".tile")[++that.selectTilePaletteIndex - 1]).addClass("selected");
      }
    };

    MapMaker.prototype.addTilePalette = function(tile) {
      var tile_dom;
      tile_dom = new Image();
      $(tile_dom).addClass("tile palette");
      $(tile_dom).attr("src", tile);
      $(tile_dom).appendTo($("#tile-palette-list"));
      $(tile_dom).on('click', {
        that: this
      }, this.selectTilePalette);
      $(tile_dom).click();
      this.tilePalette.push(tile);
    };

    MapMaker.prototype.addGitPalette = function(git) {
      var git_dom;
      git_dom = document.createElement("div");
      $(git_dom).addClass("git palette");
      $(git_dom).addClass("git-" + git);
      $(git_dom).appendTo($("#git-palette-list"));
      $(git_dom).on('click', {
        that: this
      }, this.selectGitPalette);
      $(git_dom).click();
    };

    MapMaker.prototype.addObjectPalette = function(tile) {
      var object;
      object = new Image();
      $(object).addClass("object palette");
      $(object).attr("src", tile);
      $(object).appendTo($("#object-palette-list"));
      $(object).on('click', {
        that: this
      }, this.selectObjectPalette);
      $(object).click();
      this.objectPalette.push(tile);
    };

    MapMaker.prototype.addObject = function(x, y, idx) {
      var object_dom;
      object_dom = document.createElement("div");
      this.object.push([x, y, idx]);
      this.objectDomRedraw();
      return this.object.length - 1;
    };

    MapMaker.prototype.clearMode = function() {
      $("li").removeClass("selected");
      $("#git-list").fadeOut(0);
      $("#object-list").fadeOut(0);
      $("#tile-list").fadeOut(0);
      $("#save").fadeOut(0);
    };

    MapMaker.prototype.tileMode = function(e) {
      var that;
      that = e.data.that;
      that.clearMode();
      $(this).addClass("selected");
      $("#tile-list").fadeIn(0);
      that.mode = "tile";
    };

    MapMaker.prototype.gitMode = function(e) {
      var that;
      that = e.data.that;
      that.clearMode();
      $(this).addClass("selected");
      $("#git-list").fadeIn(0);
      that.mode = "git";
    };

    MapMaker.prototype.objectMode = function(e) {
      var that;
      that = e.data.that;
      that.clearMode();
      $(this).addClass("selected");
      that.mode = "object";
      $("#object-list").fadeIn(0);
    };

    MapMaker.prototype.saveMode = function(e) {
      var that;
      that = e.data.that;
      that.clearMode();
      $(this).addClass("selected");
      that.mode = "save";
      $("#save").fadeIn(0);
    };

    MapMaker.prototype.selectTilePalette = function(e) {
      var that;
      that = e.data.that;
      $(".tile.selected").removeClass("selected");
      $(this).addClass("selected");
      that.selectTilePaletteIndex = $(".tile").index($(this)) + 1;
    };

    MapMaker.prototype.selectGitPalette = function(e) {
      var that;
      that = e.data.that;
      $(".git.selected").removeClass("selected");
      $(this).addClass("selected");
      that.selectGitPaletteIndex = $(".git").index($(this));
    };

    MapMaker.prototype.selectObjectPalette = function(e) {
      var that;
      that = e.data.that;
      $(".object.selected").removeClass("selected");
      $(this).addClass("selected");
      that.selectObjectPaletteIndex = $(".object").index($(this)) + 1;
    };

    MapMaker.prototype.selectObject = function(e) {
      var that;
      that = e.data.that;
      that.offsetX = 0;
      that.offsetY = 0;
      that.selectObjectPaletteIndex = 0;
      that.selectObjectIndex = e.data.index;
    };

    MapMaker.prototype.deleteObject = function(e) {
      var index, that;
      that = e.data.that;
      index = $(this).data("index");
      that.object[index] = 0;
      that.selectObjectIndex = -1;
      $(this).remove();
    };

    MapMaker.prototype.orderObject = function(e) {
      var index, that, tmp;
      that = e.data.that;
      index = parseInt($(this).parent().data("index"));
      tmp = that.object[index];
      if (index + 1 < that.object.length) {
        that.object[index] = that.object[index + 1];
        that.object[index + 1] = tmp;
        that.objectDomRedraw();
      }
      return e.preventDefault();
    };

    MapMaker.prototype.objectDomRedraw = function() {
      var i, object, object_dom, _i, _len, _ref, _results;
      $("#object-use-list").html("");
      _ref = this.object;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        object = _ref[i];
        object_dom = document.createElement("div");
        $(object_dom).html(("#" + i + " " + object[2] + " x:") + object[0] + " y:" + object[1] + "  <span>â†“</span>");
        $(object_dom).data("index", i);
        $(object_dom).addClass("object");
        $(object_dom).appendTo($("#object-use-list"));
        $(object_dom).on('dblclick', {
          that: this
        }, this.deleteObject);
        $(object_dom).on('mouseenter', {
          that: this
        }, this.highlightObject);
        $(object_dom).on('mouseleave', {
          that: this
        }, this.disHighlightObject);
        _results.push($(object_dom).find("span").on('click', {
          that: this
        }, this.orderObject));
      }
      return _results;
    };

    MapMaker.prototype.highlightObject = function(e) {
      var that;
      that = e.data.that;
      return that.highlightObjectIndex = $(this).data("index");
    };

    MapMaker.prototype.disHighlightObject = function(e) {
      var that;
      that = e.data.that;
      return that.highlightObjectIndex = -1;
    };

    MapMaker.prototype.start_draw = function(e) {
      var i, idx, object, that, x, y, _i, _len, _ref;
      that = e.data.that;
      switch (that.mode) {
        case "tile":
        case "git":
          that.drawing = 1;
          that.draw(e);
          break;
        case "object":
          if (that.selectObjectPaletteIndex) {
            idx = that.addObject(e.pageX - that.canvas.position().left, e.pageY - that.canvas.position().top, that.selectObjectPaletteIndex);
            that.selectObjectIndex = idx;
          } else {
            x = e.pageX + $("#left").scrollLeft();
            y = e.pageY + $("#left").scrollTop();
            _ref = that.object;
            for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
              object = _ref[i];
              if (object[0] < x && object[1] < y && x < object[0] + $(".object")[object[2] - 1].width && y < object[1] + $(".object")[object[2] - 1].height) {
                that.offsetX = x - object[0];
                that.offsetY = y - object[1];
                that.selectObjectIndex = i;
              }
            }
          }
      }
    };

    MapMaker.prototype.draw = function(e) {
      var that, x, y;
      that = e.data.that;
      x = Math.ceil((e.pageX - that.canvas.position().left) / 40) - 1;
      y = Math.ceil((e.pageY - that.canvas.position().top) / 40) - 1;
      switch (that.mode) {
        case "tile":
          if (that.drawing !== 1) {
            return;
          }
          that.data[y][x] = that.selectTilePaletteIndex;
          break;
        case "git":
          if (that.drawing !== 1) {
            return;
          }
          that.git[y][x] = that.selectGitPaletteIndex;
          break;
        case "object":
          if (that.selectObjectIndex === -1) {
            return;
          }
          that.object[that.selectObjectIndex][0] = e.pageX - that.canvas.position().left - that.offsetX;
          that.object[that.selectObjectIndex][1] = e.pageY - that.canvas.position().top - that.offsetY;
      }
    };

    MapMaker.prototype.end_draw = function(e) {
      var that;
      that = e.data.that;
      that.drawing = 0;
      that.selectObjectIndex = -1;
      that.selectObjectPaletteIndex = 0;
    };

    MapMaker.prototype.redraw = function() {
      var h, i, object, that, w, _i, _j, _k, _l, _len, _m, _n, _o, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
      this.context.fillStyle = "#FFFFFF";
      this.context.fillRect(0, 0, this.width * 40, this.height * 40);
      for (w = _i = 0, _ref = this.width; 0 <= _ref ? _i <= _ref : _i >= _ref; w = 0 <= _ref ? ++_i : --_i) {
        for (h = _j = 0, _ref1 = this.height; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; h = 0 <= _ref1 ? ++_j : --_j) {
          if (this.data[h][w]) {
            this.context.drawImage($(".tile")[this.data[h][w] - 1], w * 40, h * 40);
          }
        }
      }
      _ref2 = this.object;
      for (i = _k = 0, _len = _ref2.length; _k < _len; i = ++_k) {
        object = _ref2[i];
        if (this.selectObjectIndex === i || this.highlightObjectIndex === i) {
          this.context.fillStyle = 'rgba(54, 143, 24, .5)';
          this.context.fillRect(object[0], object[1], $(".object")[object[2] - 1].width, $(".object")[object[2] - 1].height);
        }
        if (object !== 0) {
          this.context.drawImage($(".object")[object[2] - 1], object[0], object[1]);
        }
      }
      for (w = _l = 0, _ref3 = this.width; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; w = 0 <= _ref3 ? ++_l : --_l) {
        for (h = _m = 0, _ref4 = this.height; 0 <= _ref4 ? _m <= _ref4 : _m >= _ref4; h = 0 <= _ref4 ? ++_m : --_m) {
          if (this.mode === "git") {
            switch (this.git[h][w]) {
              case 1:
                this.context.fillStyle = 'rgba(54, 143, 24, .5)';
                break;
              case 0:
                this.context.fillStyle = 'rgba(179, 41, 41, .5)';
            }
            this.context.fillRect(w * 40, h * 40, 40, 40);
          }
        }
      }
      this.context.fillStyle = "#CCCCCC";
      for (w = _n = 0, _ref5 = this.width; 0 <= _ref5 ? _n <= _ref5 : _n >= _ref5; w = 0 <= _ref5 ? ++_n : --_n) {
        this.context.fillRect(w * 40, 0, 1, this.height * 40);
      }
      for (h = _o = 0, _ref6 = this.height; 0 <= _ref6 ? _o <= _ref6 : _o >= _ref6; h = 0 <= _ref6 ? ++_o : --_o) {
        this.context.fillRect(0, h * 40, this.width * 40, 1);
      }
      that = this;
      setTimeout(function() {
        return that.redraw.apply(that);
      }, 100);
    };

    MapMaker.prototype.load = function() {
      var d, i, o, object, q, tile, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      q = $("textarea").val();
      d = eval(q);
      this.width = d[0];
      this.height = d[1];
      this.data = d[2];
      this.git = d[3];
      this.tilePalette = [];
      this.objectPalette = [];
      $(".tile.palette").remove();
      $(".object.palette").remove();
      _ref = d[5];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        tile = _ref[i];
        this.addTilePalette(tile);
      }
      _ref1 = d[6];
      for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
        object = _ref1[i];
        this.addObjectPalette(object);
      }
      $("#object-use-list").empty();
      _ref2 = d[4];
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        o = _ref2[_k];
        this.addObject(o[0], o[1], o[2]);
      }
      this.canvas = $("canvas");
      this.canvas.attr("width", this.width * 40);
      this.canvas.attr("height", this.height * 40);
      this.context = this.canvas[0].getContext("2d");
    };

    MapMaker.prototype.save = function() {
      var col, h, object, row, str, tile, w, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _m, _n, _o, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
      str = "[" + this.width + "," + this.height + ",";
      str += "[";
      _ref = this.data;
      for (w = _i = 0, _len = _ref.length; _i < _len; w = ++_i) {
        row = _ref[w];
        str += "[";
        _ref1 = this.data[w];
        for (h = _j = 0, _len1 = _ref1.length; _j < _len1; h = ++_j) {
          col = _ref1[h];
          str += col + ",";
        }
        str += "],\n";
      }
      str += "],[";
      _ref2 = this.git;
      for (w = _k = 0, _len2 = _ref2.length; _k < _len2; w = ++_k) {
        row = _ref2[w];
        str += "[";
        _ref3 = this.git[w];
        for (h = _l = 0, _len3 = _ref3.length; _l < _len3; h = ++_l) {
          col = _ref3[h];
          str += col + ",";
        }
        str += "],\n";
      }
      str += "],[";
      _ref4 = this.object;
      for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
        object = _ref4[_m];
        if (object !== 0) {
          str += "[" + object[0] + "," + object[1] + "," + object[2] + "],";
        }
      }
      str += "],[";
      _ref5 = this.tilePalette;
      for (_n = 0, _len5 = _ref5.length; _n < _len5; _n++) {
        tile = _ref5[_n];
        str += "\"" + tile + "\",";
      }
      str += "],[";
      _ref6 = this.objectPalette;
      for (_o = 0, _len6 = _ref6.length; _o < _len6; _o++) {
        object = _ref6[_o];
        str += "\"" + object + "\",";
      }
      str += "]]";
      return $("#savearea").val(str);
    };

    return MapMaker;

  })();

  $(function() {
    window.MapMaker = new MapMaker();
    $(window).on('resize', function() {
      return $("#left").css({
        width: $(window).width() - 281
      });
    });
    return $("#left").css({
      width: $(window).width() - 281
    });
  });

}).call(this);
