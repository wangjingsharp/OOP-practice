// Generated by CoffeeScript 1.7.1
(function() {
  window.sendServer = function() {
    this.move = function(x, y) {
      return socket.emit('Users', {
        id: game.role.id,
        move: [x, y]
      });
    };
    return this.action = function(dir) {
      return socket.emit('Users', {
        id: game.role.id,
        action: dir
      });
    };
  };

  window.sendUser = function() {
    var tim, user;
    tim = new Date();
    if (typeof game === "undefined" || !game.role) {
      return;
    }
    user = cloneUser(game.role);
    user = $.extend({}, user);
    user.statusList = null;
    user.skills = null;
    return socket.emit('Users', {
      user: JSON.stringify(user),
      lastTime: tim.getTime()
    });
  };

  socket.on('LoginResponse', function(data) {
    if (data.request === "success") {
      loginFlag.win.close();
      game.role_name = data.user.name;
      game.role_id = data.user._id;
      return Framework.Game.goToLevel('level1');
    } else {
      return console.log("fail login");
    }
  });

  socket.on('SignUpResponse', function(data) {
    if (data.request === "success") {
      signUpFlag.win.close();
      game.role_name = data.user[0].name;
      return Framework.Game.goToLevel('level1');
    } else {
      console.log("fail signUp");
      return console.log(data.reason);
    }
  });

  socket.on('UsersByMapResponse', function(data) {
    var i, idx, new_user, user, users, _i, _j, _len, _len1, _ref, _results;
    users = data.users;
    idx = 0;
    for (_i = 0, _len = users.length; _i < _len; _i++) {
      user = users[_i];
      user = JSON.parse(user.user);
      if (user.id === game.role.id) {
        continue;
      }
      idx = game.users.map(function(ele) {
        return ele.id;
      }).indexOf(user.id);
      if (idx === -1) {
        console.log(user.head);
        new_user = new Role(user["name"], job[user["sprite"]]);
        new_user = resetRole(new_user, user);
        console.log(new_user);
        game.users.push(new_user);
      } else {
        game.users[idx] = resetRole(game.users[idx], user);
      }
    }
    _ref = game.users;
    _results = [];
    for (i = _j = 0, _len1 = _ref.length; _j < _len1; i = ++_j) {
      user = _ref[i];
      idx = users.map(function(ele) {
        return JSON.parse(ele.user).id;
      }).indexOf(user.id);
      if (idx === -1) {
        _results.push(game.users.splice(i, 1));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  });

  socket.on('Chat', function(data) {
    return game.chat.receiveMsg(data);
  });

  setInterval(sendUser, 33);

  game.loaded_sprite_count++;

  if (game.loaded_sprite_count === game.sprite_count) {
    $("#loader").hide();
  }

  return;

}).call(this);
