// Generated by CoffeeScript 1.7.1
(function() {
  window.MissionManager = (function() {
    function MissionManager() {
      this.missions = [];
      this.complete_missions = [];
      this.finish_missions = [];
      this.mission_index = 0;
    }

    MissionManager.prototype.addMission = function(mission) {
      this.missions.push(mission);
      if (this.windows_manager == null) {
        this.windows_manager = game.windows_manager;
      }
      if (this.windows_manager.findWindow('任務清單')) {
        return this.reviewMissions();
      }
    };

    MissionManager.prototype.findAllMission = function(name) {
      var mission, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.missions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        mission = _ref[_i];
        if (mission.name === name) {
          return mission;
        }
      }
      _ref1 = this.complete_missions;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        mission = _ref1[_j];
        if (mission.name === name) {
          return mission;
        }
      }
      return false;
    };

    MissionManager.prototype.findBeingMission = function(name) {
      var idx;
      idx = this.missions.map(function(ele) {
        return ele.name;
      }).indexOf(name);
      return this.missions[idx];
    };

    MissionManager.prototype.removeMission = function(name) {
      var idx, mission;
      idx = this.missions.map(function(ele) {
        return ele.name;
      }).indexOf(name);
      mission = this.missions[idx];
      return this.missions["delete"](mission);
    };

    MissionManager.prototype.completeMission = function(name) {
      var idx, mission;
      idx = this.missions.map(function(ele) {
        return ele.name;
      }).indexOf(name);
      mission = this.missions[idx];
      this.complete_missions.push(mission);
      return this.removeMission(name);
    };

    MissionManager.prototype.killMonster = function(monster_name) {
      var idx, mission, mission_children, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.missions;
      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
        mission = _ref[idx];
        _ref1 = mission.missions;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          mission_children = _ref1[_j];
          if (typeof mission_children.killMonster === "function") {
            mission_children.killMonster(monster_name);
            if (this.windows_manager.findWindow(mission.name)) {
              this.missionView(idx);
            }
          }
        }
      }
    };

    MissionManager.prototype.collectItem = function(item_name) {
      var idx, mission, mission_children, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.missions;
      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
        mission = _ref[idx];
        _ref1 = mission.missions;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          mission_children = _ref1[_j];
          if (typeof mission_children.collectItem === "function") {
            mission_children.collectItem(item_name);
            if (this.windows_manager.findWindow(mission.name)) {
              this.missionView(idx);
            }
          }
        }
      }
    };

    MissionManager.prototype.tracingComplete = function(npc_name) {
      var idx, mission, mission_children, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.missions;
      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
        mission = _ref[idx];
        _ref1 = mission.missions;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          mission_children = _ref1[_j];
          if (typeof mission_children.tracingComplete === "function") {
            mission_children.tracingComplete(npc_name);
            if (this.windows_manager.findWindow(mission.name)) {
              this.missionView(idx);
            }
          }
        }
      }
    };

    MissionManager.prototype.showMissions = function() {
      var mission, option, win, _i, _len, _ref, _results;
      if (this.windows_manager == null) {
        this.windows_manager = game.windows_manager;
      }
      if (win = this.windows_manager.findWindow('任務清單')) {
        if (win.isHide()) {
          return win.show();
        } else {
          return win.hide();
        }
      } else {
        this.win = new Windows(300, 500, '任務清單');
        _ref = this.missions;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          mission = _ref[_i];
          option = this.win.addOption(mission.name, this.missionView, this);
          _results.push(option.addClass("mission_option"));
        }
        return _results;
      }
    };

    MissionManager.prototype.reviewMissions = function() {
      var mission, option, _i, _len, _ref, _results;
      if (!this.win) {
        return;
      }
      this.win.setMsg('');
      _ref = this.missions;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        mission = _ref[_i];
        _results.push(option = this.win.addOption(mission.name, this.missionView, this));
      }
      return _results;
    };

    MissionManager.prototype.missionView = function(index) {
      var description, mission, row, rows, submission, win, _i, _len, _ref, _results;
      mission = this.missions[index];
      this.win.next_button.hide();
      win = new Windows(600, 300, mission.name);
      description = new Row(mission.description);
      description.appendTo(win.main);
      _ref = mission.missions;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        submission = _ref[_i];
        rows = submission.schedule();
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = rows.length; _j < _len1; _j++) {
            row = rows[_j];
            _results1.push(row.appendTo(win.main));
          }
          return _results1;
        })());
      }
      return _results;
    };

    return MissionManager;

  })();

}).call(this);
